Реализовал представления на основе функций:
 - Применение функции сокращенного доступа get_object_or_404()
 - пагинация
 - обработка исключений

Реализовал представления на основе классов:
 - использовано наследование от ListView, переопределяя поля которого задавал свои значения

Создал модель Post:
 - со своим модельным менеджером Post.published.all();
 - использовал класс enum для поля с выбором знамения;
 - мета класс для обратной сортировки постов по умолчанию;
 - использовал встроенную модель User из auth.models для создания связи один ко многим по внешнему ключу;
 - определил метод get_absolute_url, который возвращает канонический url для каждого объекта (поста). Функция reverse для доступа к url по имени из blog/urls.py
    Теги:
     - менеджер тегов TaggableManager из приложения django-taggit;
     - Добавилось две таблицы taggit_tag и taggit_taggeditem для связи многие ко многим с таблицей Post (для поиска по полю с таким отношением используется конструкция field__in)
     - возможность сортировать посты по тегу, нажимая на тег
     - отображение схожих постов по числу имеющихся общих тегов. Посты, рекомендованные в разделе "Похожие посты" проявляются в убывающем порядке в зависимости от числа общих тегов с изначальным постом.

Пагинация (многостраничность):
 - html, описывающий универсальную пагинацию
 - представление с Paginator() FBV
 - обработка исключений в views FBV

Формы:
  - отдельный файл forms.py
  - определены поля формы с валидацией и отображением в html
  - добавлено представление, обрабатывающее форму

Email:
  - отправка постов по электронной почте (изменено: settings, view, urls, forms, share.html)

Админ панель:
 - создан супер пользователь (misha 12345). token 47218b6b5ead8213c74ac8fc0cc3592d4072e9d4
 - обычный пользователь (maxim 12345maxim; m mmmmm12345)
 - добавлены модели для управления через админ панель (изменен файл admin.py)

Комментарии к постам:
  - представление через декоратор @require_POST
  - свой фильтр шаблонов ru_plural
  - создание переменнных в шаблоне {% with comments.count as total_comments %}
  - {{ forloop.counter }} счетчик в шаблоне
  - передача данных из родительского шаблона в дочерние через include

Шаблонные теги, фильтры:
 - в папке модуле templatetags
 - для добавления в шаблон {% load blog_extras %}
 - простой шаблонный тег simple_tag, возвращающий строковый литерал. Еще один симпл тег, возвращающий список постов, сохранив результат в реиспользуемой переменной, не выводя его напрямую (base.html)
 - шаблонный тег включения inclusion_tag для прорисовки шаблона latest_posts.html. Теперь отображаются последние 3 поста на боковой панели
 - фильтр ru_plural c @register.filter
 - фильтр для поддержки синтаксиса markdown. Конвертирует форматирование markdown в HTML.

 Sitemap, карта сайта:
  - Это файл со ссылками на страницы сайта, который сообщает поисковым системам об актуальной структуре сайта.
    Информация о сайте указывается в xml тегах. Данная информация помогает поисковым системам индексировать наш сайт.
  - создан файл sitemaps.py, в котором создан класс, генерирующий ссылки для каждого объекта
  - sitemap генерируется по адресу: http://127.0.0.1:8000/sitemap.xml
  - в БД создалась таблица Sites, где хранится инфромация о доменном имени

 Перенос с sqllite на postgresql:
  - установка драйвера постгрес: pip install "psycopg[binary]"
  - выгрузка существующих данных с sqllite: python -Xutf8 manage.py dumpdata --indent=2 --output=data.json
  - подключение к бд postgresql, измененяя settings.py
  - мигрировать таблицы в новую бд
  - загрузить в нее данные: python manage.py loaddata data.json

 Полнотекстовый поиск:
  - добавить приложение django.contrib.postgres для доступа к доп функционалу постгреса (используем поиск Post.objects.filter(title__search='пост'))
  - полнотекстовый поиск по нескольким полям с search=SearchVector() через форму SearchForm
  - ранжирование с SearchRank на основе частоты появления и и степени близости друг к другу
  - поиск использует выделение основ слов благодаря SearchQuery (например, введя "длина", находит пост со словом "длиною", выделяя корень слова)
  - не ищет русские стоп слова (config='russian')
  - использовано взвешивание запросов SearchVector('title', weight='A')
  - можно использовать триграммный поиск

 Система аутентификации:
  - подключаем приложение django.contrib.auth (по умолчанию подключено в settings.py)
  - в path url accounts/ и все представления реализованы, остается только добавить шаблоны html
  - и указать login_redirect_url, logout_redirect_url в settings.py

  - создаем отдельное приложения для регистрации accounts (python manage.py startapp accounts)
  - создание представления на основе встроенного UserCreationForm для формы регистрации signup. Доступно по адресу /signup. (реализовано, в конце концов, своя фоорма в forms.py с возможностью ввода почты)

  восстановления пароля:
   - есть уже реализованное представление из auth (accounts/password_reset/), шаблон по умолчанию находится в registration/password_reset_form.html

  форма авторизации:
   - в accounts/forms.py
  - добавлена поддержка сессий

 Новые поля в модели User:
  - создали свой класс Profile, соединив связью 1к1 с имеющейся по умолчанию моделью User
  - добавили поле, хранящее фото профиля пользователя
    - добавили в settings.py MEDIA_ROOT и MEDIA_URL и прописали доп настройку в mysite/urls.py